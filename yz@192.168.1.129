from pyp2p.net import *
import time
import grequests
import requests
from pprint import pprint
import json

#Setup node's p2p node. copied
node = Net(passive_bind='192.168.1.129', passive_port=44447, node_type='passive', debug=1)
#node = Net(passive_bind='192.168.1.149', passive_port=44446, node_type='passive', debug=1)
#node = Net(passive_bind='192.168.1.131', passive_port=44445, node_type='passive', debug=1)
node.start()
node.bootstrap()
node.advertise()

#Event loop.
port = "5000"
connections = []
mining = True
mined_block = ''
previous_block = ''
did_mine_block = False
i_need_the_chain = True
first_time = True
replies = []
my_chain_length = 0

def exception_handler(request, exception):
    print("Request failed")

def chain_length_check(ip, in_port):
    reqs = [
        grequests.get('http://0.0.0.0:' + port + '/chain_length'),
        grequests.get('http://' + ip + ':' + in_port + '/chain_length')
    ]

    results = grequests.map(reqs, exception_handler=exception_handler)
    return results

def put_chains_together():
    reqs = []
    above_previous = 0
    #r = requests.get('http://0.0.0.0:' + port + '/chain_length')
    #my_chain_length = json.loads(r.text)['length']

    print('\n //// Previous hash in put_chains_together')
    print(json.loads(previous_block)['previous_hash'])
    print(len(connections))

    for index, item in enumerate(connections):
        reqs.append(grequests.get("http://" + item['ip'] + ":" + item['port'] + "/give_chain", params = {'previous': json.loads(previous_block)['previous_hash'], 'start_at_index':above_previous, 'increment_by':int(my_chain_length / len(connections))}))
        above_previous += (my_chain_length / len(connections))

    request_chain_results = grequests.map(reqs, exception_handler=exception_handler)

    chains_to_add = [show_json(result) for result in request_chain_results]
    
    all_chains = []
    for chain in chains_to_add:
        print('\n //// chain in chains_to_add')
        pprint(chain)
        for ch in chain['chain']:
            all_chains.append(ch)

    return all_chains

def show_json(result):
    print('\n //// status_code of a give_chain result or didnt work')
    print(result.status_code)
    return json.loads(result.content.decode())

while 1:
    if len(connections) > 0 and i_need_the_chain:
        
        r = requests.get('http://0.0.0.0:'+port+'/previous')
        previous_block = r.text
        all_chains = put_chains_together()

        headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}
        r = requests.post('http://0.0.0.0:'+port+'/add_chain', json = {'chain': all_chains}, headers=headers)
        print("\n ////new_chain_length_and_chain\n")
        print(r.text)

        i_need_the_chain = False
        mining = True

    if (mining and not i_need_the_chain and not first_time) or not (len(node.inbound) > len(connections)):
            #grequests.get('http://0.0.0.0:'+port+'/previous'),
        
        r = requests.get('http://0.0.0.0:'+port+'/previous')
        previous_block = r.text
        r1 = requests.get('http://0.0.0.0:'+port+'/mine')
        mined_block = r1.text
        #previous_block = results[0].content.decode()
        

        print('\n //// next to last block mined\n')
        print(previous_block)
        print('\n //// last block mined\n')
        print(mined_block)

        did_mine_block = True
        mining = False

    for con in node:
        con.send_line(port)

        if did_mine_block:
            print('\n //// sending out my block!\n')
            for c in node:
                c.send_line(mined_block+';'+port)
            did_mine_block = False

        for reply in con:
            if first_time:
                if reply.isdigit():
                    results = chain_length_check(con.addr, reply)

                    print('\n //// response in responses\n')
                    len_array = []
                    for result in results:
                        print('\n //// in first_time result of results')
                        len_array.append(json.loads(result.content.decode())['length'])

                    if len_array[0] < len_array[1]:
                        i_need_the_chain = True

                    first_time = False

            elif not first_time and reply.isdigit():
                found = False
                for index, item in enumerate(connections):
                    if item['ip'] == con.addr:
                        item['port'] = reply
                        found = True
                        print('\n //// Found ip in my connections!\n')

                if not found:
                    print('\n //// Adding connection to connections\n')
                    connections.append({'ip': con.addr, 'port': reply})
                    #con.send_line(port)

            elif ';' in reply:
                blocks = reply.split(';')
                print('\n //// blocks 0')
                pprint(json.loads(blocks[0]))

                r = requests.get('http://0.0.0.0:' + port + '/chain_length')
                my_chain_length = json.loads(r.text)['length']

                if json.loads(blocks[0])['index'] > my_chain_length:
                    my_chain_length = json.loads(blocks[0])['index']
                    i_need_the_chain = True

                else:
                    headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}
                    r = requests.post('http://0.0.0.0:'+port+'/validate', json = {'this_block': blocks[0]}, headers=headers)
                    print('\n //// response from validate:\n')
                    print(r.text)
                    if json.loads(r.text)['add']:
                        print('\n //// sending out that the block is valid') 
                        con.send_line(port+':validated'+json.loads(blocks[0])['node'])
                    else:
                        print('\n //// sending out that the block is invalid')
                        con.send_line(port+':invalid'+json.loads(blocks[0])['node'])

            elif ('validated'+json.loads(mined_block)['node']) in reply:
                replies.append(reply)
                print('\n //// received validated message\n')
                print(str(len(replies)) + ': replies\n')
                print(str(len(connections)) + ': connections\n')

                if len(replies) == len(connections):
                    mining = True
                    replies = []
                    print('\n //// I am fully validated ////\n')
                else:
                    print('\n //// still not there - waiting for validations to come in\n')

            elif ('invalid'+json.loads(mined_block)['node']) in reply:
                port_of = reply.split(':')[0]
                results = chain_length_check(con.addr, port_of)

                print('\n //// response in responses\n')
                len_array = []
                for result in results:
                    len_array.append(json.loads(result.content.decode())['length'])

                if len_array[0] >= len_array[1]:
                    print('\n //// I have an invalid block ////\n')
                    r = requests.get('http://0.0.0.0:'+port+'/subtract_block')
                    if json.loads(r.text)['result'] == 'block removed':
                        print('\n //// block removed\n')
                        mining = True

                else:
                    i_need_the_chain = True
                    print('\n //// doing check in invalid my array is shorter than checked array\n')                    

    time.sleep(1)